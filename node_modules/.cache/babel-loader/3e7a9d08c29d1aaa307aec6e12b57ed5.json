{"ast":null,"code":"var _jsxFileName = \"/home/hemant/Desktop/broadband/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport VectorLayersExample from './Maps/MarkerMaps';\nimport Autosuggest from 'react-autosuggest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  name: 'C',\n  year: 1972\n}, {\n  name: 'Elm',\n  year: 2012\n}];\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  var data = [];\n  fetch('https://api.geocode.earth/v1/autocomplete?text={' + value + '}&api_key=ge-b33c597834fe4b46', {\n    method: 'get',\n    headers: {\n      'Host': 'api.geocode.earth',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',\n      'Accept': '*/*',\n      'Accept-Language': 'en-US,en;q=0.5',\n      'Accept-Encoding': 'gzip, deflate , br',\n      'Origin': 'https://www.mapzen.com',\n      'DNT': '1',\n      'Connection': 'keep-alive',\n      'Sec-Fetch-Dest': 'empty',\n      'Sec-Fetch-Mode': 'no-cors',\n      'Sec-Fetch-Site': 'cross-site',\n      'TE': 'trailers',\n      'Referer': 'https://www.mapzen.com/',\n      'Pragma': 'no-cache',\n      'Cache-Control': 'no-cache'\n    }\n  }).then(response => response.json()).then(res => {\n    // console.log(res.features)\n    for (var entry in res.features) {\n      data.push(res.features[entry].properties.name);\n    }\n  });\n  print(data);\n  return inputLength === 0 ? [] : data.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: suggestion.name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 66,\n  columnNumber: 5\n}, this);\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, _ref) => {\n      let {\n        newValue\n      } = _ref;\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = _ref2 => {\n      let {\n        value\n      } = _ref2;\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  } // myRequests = (place_name) => {\n  //   fetch('https://api.geocode.earth/v1/autocomplete?text=chic&api_key=ge-b33c597834fe4b46',{\n  //     method: 'get',\n  //     headers: {\n  //       'Host': 'api.geocode.earth',\n  //       'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',\n  //       'Accept': '*/*',\n  //       'Accept-Language': 'en-US,en;q=0.5',\n  //       'Accept-Encoding': 'gzip, deflate , br',\n  //       'Origin': 'https://www.mapzen.com',\n  //       'DNT': '1',\n  //       'Connection': 'keep-alive',\n  //       'Sec-Fetch-Dest': 'empty',\n  //       'Sec-Fetch-Mode': 'no-cors',\n  //       'Sec-Fetch-Site': 'cross-site',\n  //       'TE': 'trailers',\n  //       'Referer': 'https://www.mapzen.com/',\n  //       'Pragma': 'no-cache',\n  //       'Cache-Control': 'no-cache'\n  //     }\n  //   })\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       console.log(data)\n  //     })\n  // }\n\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: 'Type a city name',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"outline w-70 pa3 ma2\",\n        children: /*#__PURE__*/_jsxDEV(VectorLayersExample, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"outline w-30 pa3 ma2\",\n        children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: suggestions,\n          onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n          onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n          getSuggestionValue: getSuggestionValue,\n          renderSuggestion: renderSuggestion,\n          inputProps: inputProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n            id: \"inputGroup-sizing-default\",\n            children: \"Enter City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            \"aria-label\": \"Default\",\n            \"aria-describedby\": \"inputGroup-sizing-default\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            variant: \"success\",\n            id: \"dropdown-basic\",\n            children: \"Select ISP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              href: \"#/action-1\",\n              children: \"Centurylink\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              href: \"#/action-2\",\n              children: \"Xfinity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              href: \"#/action-3\",\n              children: \"Hugesnet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              href: \"#/action-3\",\n              children: \"Viaset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/hemant/Desktop/broadband/src/App.js"],"names":["React","Component","MapContainer","TileLayer","Marker","Popup","Dropdown","Button","InputGroup","FormControl","VectorLayersExample","Autosuggest","languages","name","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","data","fetch","method","headers","then","response","json","res","entry","features","push","properties","print","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","App","constructor","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport VectorLayersExample from './Maps/MarkerMaps';\nimport Autosuggest from 'react-autosuggest';\n\n\n  const languages = [\n    {\n      name: 'C',\n      year: 1972\n    },\n    {\n      name: 'Elm',\n      year: 2012\n    }\n  ];\n\n  const getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    var data = []\n\n    fetch('https://api.geocode.earth/v1/autocomplete?text={' + value + '}&api_key=ge-b33c597834fe4b46',{\n      method: 'get',\n      headers: {\n        'Host': 'api.geocode.earth',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',\n        'Accept': '*/*',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate , br',\n        'Origin': 'https://www.mapzen.com',\n        'DNT': '1',\n        'Connection': 'keep-alive',\n        'Sec-Fetch-Dest': 'empty',\n        'Sec-Fetch-Mode': 'no-cors',\n        'Sec-Fetch-Site': 'cross-site',\n        'TE': 'trailers',\n        'Referer': 'https://www.mapzen.com/',\n        'Pragma': 'no-cache',\n        'Cache-Control': 'no-cache'\n      }\n    })\n      .then(response => response.json())\n      .then(res => {\n        // console.log(res.features)\n        for(var entry in res.features){\n          data.push(res.features[entry].properties.name)\n        }\n\n      })\n      print(data)\n      return inputLength === 0 ? [] : data.filter(lang =>\n        lang.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n  };\n\n  const getSuggestionValue = suggestion => suggestion.name;\n\n  const renderSuggestion = suggestion => (\n    <div>\n      {suggestion.name}\n    </div>\n  );\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  // myRequests = (place_name) => {\n  //   fetch('https://api.geocode.earth/v1/autocomplete?text=chic&api_key=ge-b33c597834fe4b46',{\n  //     method: 'get',\n  //     headers: {\n  //       'Host': 'api.geocode.earth',\n  //       'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',\n  //       'Accept': '*/*',\n  //       'Accept-Language': 'en-US,en;q=0.5',\n  //       'Accept-Encoding': 'gzip, deflate , br',\n  //       'Origin': 'https://www.mapzen.com',\n  //       'DNT': '1',\n  //       'Connection': 'keep-alive',\n  //       'Sec-Fetch-Dest': 'empty',\n  //       'Sec-Fetch-Mode': 'no-cors',\n  //       'Sec-Fetch-Site': 'cross-site',\n  //       'TE': 'trailers',\n  //       'Referer': 'https://www.mapzen.com/',\n  //       'Pragma': 'no-cache',\n  //       'Cache-Control': 'no-cache'\n  //     }\n  //   })\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       console.log(data)\n  //     })\n  // }\n\n\n    onChange = (event, { newValue }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({ value }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n\n  render(){\n    const { value, suggestions } = this.state;\n\n    const inputProps = {\n      placeholder: 'Type a city name',\n      value,\n      onChange: this.onChange\n    };\n\n  return (\n    <div className=\"flex\">\n\n      <div class=\"outline w-70 pa3 ma2\">\n        {/*<MapContainer center={[41.8781, -87.6298]} zoom={15} >\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n           />\n         <Marker position={[41.8781, -87.6298]}>\n              <Popup>\n                I am a pop-up!\n              </Popup>\n          </Marker>\n        </MapContainer>*/}\n        <VectorLayersExample/>\n      </div>\n\n\n      <div class=\"outline w-30 pa3 ma2\">\n\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps}\n        />\n\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"inputGroup-sizing-default\">Enter City</InputGroup.Text>\n          <FormControl\n            aria-label=\"Default\"\n            aria-describedby=\"inputGroup-sizing-default\"\n          />\n        </InputGroup>\n\n        <Dropdown>\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            Select ISP\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu>\n            <Dropdown.Item href=\"#/action-1\">Centurylink</Dropdown.Item>\n            <Dropdown.Item href=\"#/action-2\">Xfinity</Dropdown.Item>\n            <Dropdown.Item href=\"#/action-3\">Hugesnet</Dropdown.Item>\n            <Dropdown.Item href=\"#/action-3\">Viaset</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        {/*<Button className=\"mb-3\" variant=\"primary\" onClick={ this.myRequests(\"Chic\") }>Primary</Button>{' '}*/}\n\n      </div>\n\n    </div>\n  );\n}\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}