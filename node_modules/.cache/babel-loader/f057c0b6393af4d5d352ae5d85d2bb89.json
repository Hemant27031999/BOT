{"ast":null,"code":"var _jsxFileName = \"/home/hemant/Desktop/broadband/src/Maps/MarkerMaps.js\",\n    _s = $RefreshSig$();\n\nimport { Circle, CircleMarker, MapContainer, Polyline, Polygon, Popup, Rectangle, TileLayer, Tooltip, UpdateMapCenter, useMap } from 'react-leaflet';\nimport text from './new_orleans.txt';\nimport text2 from './phoenix.txt';\nimport React, { useState, Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = [29.926734999999997, -90.085848];\nconst fillBlueOptions = {\n  fillColor: 'blue'\n};\nconst blackOptions = {\n  color: 'black'\n};\nconst limeOptions = {\n  color: 'lime'\n};\nconst purpleOptions = {\n  color: 'purple'\n};\nconst redOptions = {\n  color: 'red'\n};\nconst singleColor = '#00087a';\nconst doubleColor1 = '#7a0c00';\nconst doubleColor2 = '#014a44';\nconst MAX_COX = 100;\nconst MIN_COX = 0;\nconst CV_MAX = 13;\nconst CV_MIN = 0;\n\nfunction UpdateMapCentre(props) {\n  _s();\n\n  const map = useMap();\n  map.panTo(props.mapCentre);\n  return null;\n}\n\n_s(UpdateMapCentre, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n  return [useMap];\n});\n\n_c = UpdateMapCentre;\n\nfunction parseJSON(string) {\n  var array = JSON.parse(string);\n  return array;\n}\n\nfunction csvToArray(str) {\n  let delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \";\";\n  const headers = str.slice(0, str.indexOf(\"\\n\")).split(delimiter);\n  const rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\n  let isp_plans = {};\n  let cv_values = {};\n  const arr = rows.map(function (row) {\n    const values = row.split(delimiter);\n    const el = headers.reduce(function (object, header, index) {\n      let colName = header.trim();\n\n      if (colName === \"Coordinates\" || colName === \"cv_cox_dict\" || colName === \"cv_att_dict\" || colName === \"cv_century_dict\") {\n        object[colName] = parseJSON(values[index]); // if(colName !== \"Coordinates\"){\n        //   if(colName in isp_plans)\n        //   for (const [key, value] of Object.entries(object[colName])) {\n        //     isp_plans[colName][key] += value\n        //   }\n        // }\n      } else if (colName === \"cv_att_avg\" || colName === \"cv_cox_avg\" || colName === \"cv_centurylink_avg\") {\n        object[colName] = parseFloat(values[index]);\n      } else {\n        object[colName] = values[index];\n      }\n\n      return object;\n    }, {});\n    return el;\n  });\n  return arr;\n}\n\nconst readData = async value => {\n  console.log(text);\n  console.log(text2);\n  var res = await fetch(text);\n  res = await res.text();\n  var parsedData = csvToArray(res);\n  return parsedData;\n};\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nfunction makePolygons(data, isp, compare) {\n  var poly = [];\n  let sz = data.length;\n\n  if (!compare) {\n    let range = CV_MAX - CV_MIN;\n\n    for (let i = 0; i < sz; i++) {\n      let opa = data[i]['cv_' + isp + '_avg'] / range;\n      poly.push( /*#__PURE__*/_jsxDEV(Polygon, {\n        pathOptions: {\n          color: '#ffffff',\n          opacity: opa,\n          fillColor: singleColor,\n          fillOpacity: opa\n        },\n        positions: data[i]['Coordinates'] // eventHandlers={{\n        //   mouseover: () => {console.log(i)}\n        // }}\n        ,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          children: \"My Carriage value is: \" + data[i]['cv_' + isp + '_avg']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this));\n    }\n  } else {\n    let range = CV_MAX - CV_MIN;\n    let second_isp = Object.keys(data[0])[3];\n    second_isp = second_isp.split(\"_\")[1];\n\n    for (let i = 0; i < sz; i++) {\n      let diff = data[i]['cv_cox_avg'] - data[i]['cv_' + second_isp + '_avg'];\n      let currentColor = '';\n      let currentRange = 0;\n      let opa = 0;\n\n      if (diff > 0) {\n        currentColor = doubleColor1;\n        opa = data[i]['cv_cox_avg'] / range;\n      } else {\n        currentColor = doubleColor2;\n        opa = data[i]['cv_' + second_isp + '_avg'] / range;\n      }\n\n      poly.push( /*#__PURE__*/_jsxDEV(Polygon, {\n        pathOptions: {\n          color: currentColor,\n          opacity: opa,\n          fillColor: currentColor,\n          fillOpacity: opa\n        },\n        positions: data[i]['Coordinates'] // eventHandlers={{\n        //   mouseover: () => {console.log(i)}\n        // }}\n        ,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          children: \"COX Carriage value: \" + data[i]['cv_cox_avg'] + \",\" + second_isp.toUpperCase() + \" Carriage value: \" + data[i]['cv_' + second_isp + '_avg']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  return poly;\n}\n\nclass VectorLayersExample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      res: [],\n      isp: this.props['isp'],\n      city: this.props['city']\n    };\n  }\n\n  async componentDidMount() {\n    var rr = await readData();\n    this.setState({\n      res: rr\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: this.props.center,\n        zoom: 13,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Circle, {\n          center: this.props.center,\n          pathOptions: fillBlueOptions,\n          radius: 200\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CircleMarker, {\n          center: center,\n          pathOptions: redOptions,\n          radius: 20,\n          \"data-tip\": \"hello world\",\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: \"Popup in CircleMarker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), makePolygons(this.state.res, this.props.isp, this.props.compareTwoISPs), /*#__PURE__*/_jsxDEV(UpdateMapCentre, {\n          mapCentre: this.props.center\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default VectorLayersExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateMapCentre\");","map":{"version":3,"sources":["/home/hemant/Desktop/broadband/src/Maps/MarkerMaps.js"],"names":["Circle","CircleMarker","MapContainer","Polyline","Polygon","Popup","Rectangle","TileLayer","Tooltip","UpdateMapCenter","useMap","text","text2","React","useState","Component","Button","center","fillBlueOptions","fillColor","blackOptions","color","limeOptions","purpleOptions","redOptions","singleColor","doubleColor1","doubleColor2","MAX_COX","MIN_COX","CV_MAX","CV_MIN","UpdateMapCentre","props","map","panTo","mapCentre","parseJSON","string","array","JSON","parse","csvToArray","str","delimiter","headers","slice","indexOf","split","rows","isp_plans","cv_values","arr","row","values","el","reduce","object","header","index","colName","trim","parseFloat","readData","value","console","log","res","fetch","parsedData","isEmpty","obj","Object","keys","length","makePolygons","data","isp","compare","poly","sz","range","i","opa","push","opacity","fillOpacity","second_isp","diff","currentColor","currentRange","toUpperCase","VectorLayersExample","constructor","state","city","componentDidMount","rr","setState","render","compareTwoISPs"],"mappings":"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","sourcesContent":["import {\n  Circle,\n  CircleMarker,\n  MapContainer,\n  Polyline,\n  Polygon,\n  Popup,\n  Rectangle,\n  TileLayer,\n  Tooltip,\n  UpdateMapCenter,\n  useMap\n} from 'react-leaflet';\nimport text from './new_orleans.txt';\nimport text2 from './phoenix.txt';\nimport React, { useState, Component } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst center = [29.926734999999997, -90.085848];\n\nconst fillBlueOptions = { fillColor: 'blue' }\nconst blackOptions = { color: 'black' }\nconst limeOptions = { color: 'lime' }\nconst purpleOptions = { color: 'purple' }\nconst redOptions = { color: 'red' }\n\nconst singleColor = '#00087a'\nconst doubleColor1 = '#7a0c00'\nconst doubleColor2 = '#014a44'\n\nconst MAX_COX = 100\nconst MIN_COX = 0\n\nconst CV_MAX = 13\nconst CV_MIN = 0\n\n\nfunction UpdateMapCentre(props) {\n  const map = useMap();\n  map.panTo(props.mapCentre);\n  return null;\n} \n\n\nfunction parseJSON(string){\n  var array = JSON.parse(string);\n  return array\n}\n\n\nfunction csvToArray(str, delimiter = \";\") {\n  const headers = str.slice(0, str.indexOf(\"\\n\")).split(delimiter);\n  const rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\n  let isp_plans = {}\n  let cv_values = {}\n  const arr = rows.map(function (row) {\n    const values = row.split(delimiter);\n    const el = headers.reduce(function (object, header, index) {\n      let colName = header.trim()\n      if(colName === \"Coordinates\" || colName === \"cv_cox_dict\" || colName === \"cv_att_dict\" || colName === \"cv_century_dict\"){\n        object[colName] = parseJSON(values[index]);\n        // if(colName !== \"Coordinates\"){\n        //   if(colName in isp_plans)\n        //   for (const [key, value] of Object.entries(object[colName])) {\n        //     isp_plans[colName][key] += value\n        //   }\n        // }\n      }\n      else if(colName === \"cv_att_avg\" || colName === \"cv_cox_avg\" || colName === \"cv_centurylink_avg\"){\n        object[colName] = parseFloat(values[index]);\n      }\n      else{\n        object[colName] = values[index];\n      }\n\n      return object;\n    }, {});\n    return el;\n  });\n\n  return arr;\n}\n\n\nconst readData = async(value) => {\n  console.log(text)\n  console.log(text2)\n  var res = await fetch(text)\n  res = await res.text()\n  var parsedData = csvToArray(res)\n  return parsedData\n};\n\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n\nfunction makePolygons(data, isp, compare){\n\n  var poly = []\n  let sz = data.length\n\n  if(!compare){\n    let range = CV_MAX - CV_MIN;\n\n    for(let i = 0; i < sz; i++){\n      let opa = data[i]['cv_' + isp + '_avg']/range\n      poly.push(\n        <Polygon \n          key={i}\n          pathOptions={{\n            color: '#ffffff',\n            opacity: opa,\n            fillColor: singleColor,\n            fillOpacity: opa\n          }}\n          positions={data[i]['Coordinates']}\n          // eventHandlers={{\n          //   mouseover: () => {console.log(i)}\n          // }}\n        >\n        <Tooltip>{\"My Carriage value is: \" + data[i]['cv_'+ isp +'_avg']}</Tooltip>\n        </Polygon>\n      )\n    }\n  }\n  else{\n    let range = CV_MAX - CV_MIN;\n    let second_isp = Object.keys(data[0])[3]\n    second_isp = second_isp.split(\"_\")[1]\n    for(let i = 0; i < sz; i++){\n      let diff = data[i]['cv_cox_avg'] - data[i]['cv_'+ second_isp +'_avg']\n      let currentColor = ''\n      let currentRange = 0\n      let opa = 0\n\n      if(diff>0){\n        currentColor = doubleColor1\n        opa = data[i]['cv_cox_avg']/range\n      }\n      else{\n        currentColor = doubleColor2\n        opa = data[i]['cv_'+ second_isp +'_avg']/range\n      }\n\n      poly.push(\n        <Polygon \n          key={i}\n          pathOptions={{\n            color: currentColor,\n            opacity: opa,\n            fillColor: currentColor,\n            fillOpacity: opa\n          }}\n          positions={data[i]['Coordinates']}\n          // eventHandlers={{\n          //   mouseover: () => {console.log(i)}\n          // }}\n        >\n        <Tooltip>{\"COX Carriage value: \" + data[i]['cv_cox_avg'] + \",\" + second_isp.toUpperCase() + \" Carriage value: \" + data[i]['cv_'+ second_isp +'_avg']}</Tooltip>\n        </Polygon>\n      )\n    }\n  }\n\n  return poly\n}\n\n\nclass VectorLayersExample extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      res: [],\n      isp: this.props['isp'],\n      city: this.props['city']\n    }\n  }\n\n  async componentDidMount() {\n    var rr = await readData()\n    this.setState({ res: rr });\n  }\n\n  render(){\n\n    return (\n      <div>\n        <MapContainer center={this.props.center} zoom={13}>\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Circle center={this.props.center} pathOptions={fillBlueOptions} radius={200} />\n          <CircleMarker\n            center={center}\n            pathOptions={redOptions}\n            radius={20}\n            data-tip=\"hello world\"\n            >\n            <Popup>Popup in CircleMarker</Popup>\n          </CircleMarker>\n          {makePolygons(this.state.res, this.props.isp, this.props.compareTwoISPs)}\n          <UpdateMapCentre mapCentre={this.props.center} />\n        </MapContainer>\n      </div>\n    );\n  }\n}\n\nexport default VectorLayersExample;"]},"metadata":{},"sourceType":"module"}