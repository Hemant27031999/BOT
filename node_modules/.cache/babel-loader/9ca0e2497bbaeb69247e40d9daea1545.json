{"ast":null,"code":"var _jsxFileName = \"/home/hemant/Desktop/broadband/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport VectorLayersExample from './Maps/MarkerMaps';\nimport Autosuggest from 'react-autosuggest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  name: 'C'\n}, {\n  name: 'Elm',\n  year: 2012\n}];\n\nconst get_result = async value => {\n  const resp = await fetch('https://api.geocode.earth/v1/autocomplete?text={' + value + '}&api_key=ge-b33c597834fe4b46', {\n    method: 'get',\n    headers: {\n      'Host': 'api.geocode.earth',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',\n      'Accept': '*/*',\n      'Accept-Language': 'en-US,en;q=0.5',\n      'Accept-Encoding': 'gzip, deflate , br',\n      'Origin': 'https://www.mapzen.com',\n      'DNT': '1',\n      'Connection': 'keep-alive',\n      'Sec-Fetch-Dest': 'empty',\n      'Sec-Fetch-Mode': 'no-cors',\n      'Sec-Fetch-Site': 'cross-site',\n      'TE': 'trailers',\n      'Referer': 'https://www.mapzen.com/',\n      'Pragma': 'no-cache',\n      'Cache-Control': 'no-cache'\n    }\n  });\n  const data1 = await resp.json();\n  return data1;\n};\n\nconst getSuggestions = async value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  var res = await get_result(value);\n  var data = [];\n\n  for (var ind in res.features) {\n    data.push({\n      name: res.features[ind].properties.name,\n      lat: res.features[ind].geometry.coordinates[0],\n      long: res.features[ind].geometry.coordinates[1]\n    });\n  }\n\n  console.log(data);\n  return data;\n};\n\nconst getSuggestionValue = suggestion => suggestion.name;\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: suggestion.name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 70,\n  columnNumber: 5\n}, this);\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, _ref) => {\n      let {\n        newValue\n      } = _ref;\n      console.log(event);\n      console.log(newValue);\n      this.setState({\n        value: newValue\n      }, () => {\n        console.log(this.state.value);\n      });\n    };\n\n    this.onSuggestionsFetchRequested = async _ref2 => {\n      let {\n        value\n      } = _ref2;\n      this.setState({\n        suggestions: await getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionSelected = value => {\n      console.log(value);\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: 'Type a city name',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"outline w-70 pa3 ma2\",\n        children: /*#__PURE__*/_jsxDEV(VectorLayersExample, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"outline w-30 pa3 ma2\",\n        children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: suggestions,\n          onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n          onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n          getSuggestionValue: getSuggestionValue,\n          renderSuggestion: renderSuggestion,\n          onSuggestionSelected: this.onSuggestionSelected,\n          inputProps: inputProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n            id: \"inputGroup-sizing-default\",\n            children: \"Enter City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            \"aria-label\": \"Default\",\n            \"aria-describedby\": \"inputGroup-sizing-default\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            variant: \"success\",\n            id: \"dropdown-basic\",\n            children: \"Select ISP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              href: \"#/action-1\",\n              children: \"Centurylink\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              href: \"#/action-2\",\n              children: \"Xfinity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              href: \"#/action-3\",\n              children: \"Hugesnet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              href: \"#/action-3\",\n              children: \"Viaset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/hemant/Desktop/broadband/src/App.js"],"names":["React","Component","MapContainer","TileLayer","Marker","Popup","Dropdown","Button","InputGroup","FormControl","VectorLayersExample","Autosuggest","languages","name","year","get_result","value","resp","fetch","method","headers","data1","json","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","res","data","ind","features","push","properties","lat","geometry","coordinates","long","console","log","getSuggestionValue","suggestion","renderSuggestion","App","constructor","onChange","event","newValue","setState","state","onSuggestionsFetchRequested","suggestions","onSuggestionSelected","onSuggestionsClearRequested","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport VectorLayersExample from './Maps/MarkerMaps';\nimport Autosuggest from 'react-autosuggest';\n\n\n  const languages = [\n    {\n      name: 'C'\n    },\n    {\n      name: 'Elm',\n      year: 2012\n    }\n  ];\n\n  const get_result = async(value) => {\n      const resp = await fetch('https://api.geocode.earth/v1/autocomplete?text={' + value + '}&api_key=ge-b33c597834fe4b46',{\n      method: 'get',\n      headers: {\n        'Host': 'api.geocode.earth',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',\n        'Accept': '*/*',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate , br',\n        'Origin': 'https://www.mapzen.com',\n        'DNT': '1',\n        'Connection': 'keep-alive',\n        'Sec-Fetch-Dest': 'empty',\n        'Sec-Fetch-Mode': 'no-cors',\n        'Sec-Fetch-Site': 'cross-site',\n        'TE': 'trailers',\n        'Referer': 'https://www.mapzen.com/',\n        'Pragma': 'no-cache',\n        'Cache-Control': 'no-cache'\n      }\n    });\n      const data1 = await resp.json();\n      return data1;\n    }\n\n  const getSuggestions = async(value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    var res = await get_result(value)\n    var data = []\n    for(var ind in res.features){\n      data.push({\n        name: res.features[ind].properties.name,\n        lat: res.features[ind].geometry.coordinates[0],\n        long: res.features[ind].geometry.coordinates[1],\n      })\n    }\n\n    console.log(data)\n\n    return data\n  };\n\n\n  const getSuggestionValue = suggestion => suggestion.name;\n\n  const renderSuggestion = suggestion => (\n    <div>\n      {suggestion.name}\n    </div>\n  );\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n\n  onChange = (event, {newValue}) => {\n    console.log(event)\n    console.log(newValue)\n    this.setState({\n      value: newValue\n    }, () => {\n      console.log(this.state.value)})\n  };\n\n  onSuggestionsFetchRequested = async({ value }) => {\n    this.setState({\n      suggestions: await getSuggestions(value)\n    });\n  };\n\n  onSuggestionSelected = (value) => {\n    console.log(value)\n  }\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n\n  render(){\n    const { value, suggestions } = this.state;\n\n    const inputProps = {\n      placeholder: 'Type a city name',\n      value,\n      onChange: this.onChange\n    };\n\n  return (\n    <div className=\"flex\">\n\n      <div class=\"outline w-70 pa3 ma2\">\n        <VectorLayersExample/>\n      </div>\n\n\n      <div class=\"outline w-30 pa3 ma2\">\n\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          onSuggestionSelected={this.onSuggestionSelected}\n          inputProps={inputProps}\n        />\n\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"inputGroup-sizing-default\">Enter City</InputGroup.Text>\n          <FormControl\n            aria-label=\"Default\"\n            aria-describedby=\"inputGroup-sizing-default\"\n          />\n        </InputGroup>\n\n        <Dropdown>\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            Select ISP\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu>\n            <Dropdown.Item href=\"#/action-1\">Centurylink</Dropdown.Item>\n            <Dropdown.Item href=\"#/action-2\">Xfinity</Dropdown.Item>\n            <Dropdown.Item href=\"#/action-3\">Hugesnet</Dropdown.Item>\n            <Dropdown.Item href=\"#/action-3\">Viaset</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        {/*<Button className=\"mb-3\" variant=\"primary\" onClick={ this.myRequests(\"Chic\") }>Primary</Button>{' '}*/}\n\n      </div>\n\n    </div>\n  );\n}\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}